/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.amimobenja.www;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author afro
 */
public class LoginForm extends javax.swing.JFrame {
    
    java.sql.Connection connDB = null;
    com.amimobenja.www.helpers.DBObject dbObject;
    
    private java.lang.String userName;
    /**
     * Creates new form LoginForm
     * @param connDb
     */
    public LoginForm(java.sql.Connection connDb) {
        connDB = connDb;
        dbObject = new com.amimobenja.www.helpers.DBObject();
        
        initComponents();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSeparator1 = new javax.swing.JSeparator();
        welcomeLbl = new javax.swing.JLabel();
        userNameLbl = new javax.swing.JLabel();
        passwordLbl = new javax.swing.JLabel();
        userNameTxt = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        abortBtn = new javax.swing.JButton();
        passwordPFTxt = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WELCOME TO SMOOTHFLOUR MILLERS");
        setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        setPreferredSize(new java.awt.Dimension(580, 160));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 420;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        welcomeLbl.setBackground(new java.awt.Color(204, 255, 0));
        welcomeLbl.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        welcomeLbl.setForeground(new java.awt.Color(0, 0, 204));
        welcomeLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLbl.setText("Please enter valid system username and password");
        welcomeLbl.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 255, 255)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.ipadx = 28;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(welcomeLbl, gridBagConstraints);

        userNameLbl.setText("User Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(userNameLbl, gridBagConstraints);

        passwordLbl.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(passwordLbl, gridBagConstraints);

        userNameTxt.setColumns(7);
        userNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTxtActionPerformed(evt);
            }
        });
        userNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                userNameTxtKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 43;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(userNameTxt, gridBagConstraints);

        loginBtn.setMnemonic('L');
        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(loginBtn, gridBagConstraints);

        refreshBtn.setMnemonic('R');
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(refreshBtn, gridBagConstraints);

        abortBtn.setMnemonic('A');
        abortBtn.setText("Abort");
        abortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(abortBtn, gridBagConstraints);

        passwordPFTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordPFTxtActionPerformed(evt);
            }
        });
        passwordPFTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordPFTxtKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(passwordPFTxt, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTxtActionPerformed

        if (evt.getModifiers() == java.awt.event.KeyEvent.VK_ENTER){

            //   formKeyTyped(evt);

        }

        // Add your handling code here:
    }//GEN-LAST:event_userNameTxtActionPerformed

    private void userNameTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userNameTxtKeyTyped

        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER){

            this.logOn2System();

        }

        // Add your handling code here:
    }//GEN-LAST:event_userNameTxtKeyTyped

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed

        this.logOn2System();

        // Add your handling code here:
    }//GEN-LAST:event_loginBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed

        this.userNameTxt.setText(null);

        this.passwordPFTxt.setText(null);

        // Add your handling code here:
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void abortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortBtnActionPerformed

        this.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_abortBtnActionPerformed

    private void passwordPFTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordPFTxtActionPerformed

        if (evt.getModifiers() == java.awt.event.KeyEvent.VK_ENTER){

            System.out.println("Key Typed");

            // formKeyTyped(evt);

        }

        // Add your handling code here:
    }//GEN-LAST:event_passwordPFTxtActionPerformed

    private void passwordPFTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordPFTxtKeyTyped

        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER){

            //        System.out.println("Papa");

            this.logOn2System();

        }

        // Add your handling code here:
    }//GEN-LAST:event_passwordPFTxtKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("------------------------PostgreSQL JDBC Connection Testing -----------------------------");
                
                try {
                    Class.forName("org.postgresql.Driver");
                } catch (ClassNotFoundException e) {
                    System.out.println("Where is your PostgreSQL JDBC Driver? Include it in your library path!");

                    e.printStackTrace();
                    return;
                }
                
                Connection connection = null;
                
                try {
                    connection = DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/soko", "postgres", "sequence");
                    
                } catch (SQLException e) {
                    System.out.println("Connection Failed! Check output console");
                    e.printStackTrace();
                    return;
                }
                
                if (connection != null) {
                    System.out.println("You made it, take control of your database now!");
                    
                } else {
                    System.out.println("Failed to make connection!");
                }
                
                new LoginForm(connection).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortBtn;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JPasswordField passwordPFTxt;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JLabel userNameLbl;
    private javax.swing.JTextField userNameTxt;
    private javax.swing.JLabel welcomeLbl;
    // End of variables declaration//GEN-END:variables
    
       
    private void logOn2System() {
        userName = this.userNameTxt.getText();
        
        char passsWord[] = this.passwordPFTxt.getPassword();
        
        java.lang.String passWord = java.lang.String.copyValueOf(passsWord);
        
        String username = "Me", passwordRSt = "U";
        
        if (!userName.equals("") && !passWord.equals("")) {
            try {
                                
                java.sql.PreparedStatement pstTwo = connDB.prepareStatement("SELECT username, password FROM secure_access_tbl WHERE username = '"+userName+"' "
                        + "AND password = '"+passWord+"'");
                java.sql.ResultSet rsetTwo = pstTwo.executeQuery();

                while(rsetTwo.next()) {
                    username = dbObject.getDBObject(rsetTwo.getObject(1), " -- ");
                    passwordRSt = dbObject.getDBObject(rsetTwo.getObject(2), " -- ");
                }
                
                if (userName.equals(username) && passWord.equals(passwordRSt)) {
                    System.out.println("Great Yes! We in the system!");                  
                    
                    
                    com.amimobenja.www.SoftFlourMain main = new com.amimobenja.www.SoftFlourMain(connDB, userName);
                    main.setVisible(true);
                    
                    System.out.println("Should Main Form Should Be Displayed By Now...");
                    this.dispose();
                    
                    
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Incorrect Details. Try again.", "Incorrect Values", JOptionPane.ERROR_MESSAGE);
                }
                

            } catch(java.sql.SQLException SqlExec) {
                System.out.println("Error - "+SqlExec);

            }
        
        } else {
            JOptionPane.showMessageDialog(rootPane, "Username or Password Values are empty.", "Empty Values.", JOptionPane.ERROR_MESSAGE);
        }
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.amimobenja.www;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import com.amimobenja.www.helpers.ClearTable;

/**
 *
 * @author afro
 */
public class EditMaizeBagBought extends javax.swing.JFrame {
    public static java.sql.Connection connectDB = null;
    java.lang.String userName = null;
    com.amimobenja.www.helpers.DBObject dbObject;
    java.lang.String price;
    
    private int offset;
    private int limit;

    /**
     * Creates new form TinPrices1
     */
    public EditMaizeBagBought(java.sql.Connection connDb, java.lang.String username) {
        connectDB = connDb;
        userName = username;
        dbObject = new com.amimobenja.www.helpers.DBObject();
        
        initComponents();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        offset =0;
        limit = 30;
        ClearTable.clearthisTable(maizeBagsTable);
        ShowVisibleQueryItems(offset);
        
        nextBtn.setEnabled(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        currentMaizeBagDetailsPanel = new javax.swing.JPanel();
        maizeBagsScrollPane = new javax.swing.JScrollPane();
        maizeBagsTable =  new com.amimobenja.www.helpers.JTable();
        btnNavigationPanel = new javax.swing.JPanel();
        naviEditBtn = new javax.swing.JButton();
        navRestBtn = new javax.swing.JButton();
        previousBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        editCurrentMaizeBagPanel = new javax.swing.JPanel();
        costPerBagTxt = new javax.swing.JTextField();
        totalCostTxt = new javax.swing.JTextField();
        costPerBagLbl = new javax.swing.JLabel();
        totalCostLbl = new javax.swing.JLabel();
        estiTinsTxt = new javax.swing.JTextField();
        noBagBoughtTxt = new javax.swing.JTextField();
        noBagBoughtLbl = new javax.swing.JLabel();
        tinsPerBagTxt = new javax.swing.JTextField();
        btnPanel = new javax.swing.JPanel();
        updateBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Maize Bag Prices Set-up");
        setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 750));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setToolTipText("");
        mainPanel.setLayout(new java.awt.GridBagLayout());

        currentMaizeBagDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Maize Bag Details"));
        currentMaizeBagDetailsPanel.setLayout(new java.awt.GridBagLayout());

        maizeBagsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "No. of Maize Bags", "Est. No. Of Tins", "Cost Per Bag", "Total Cost"
            }
        ));
        maizeBagsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maizeBagsTableMouseClicked(evt);
            }
        });
        maizeBagsScrollPane.setViewportView(maizeBagsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        currentMaizeBagDetailsPanel.add(maizeBagsScrollPane, gridBagConstraints);

        btnNavigationPanel.setBackground(new java.awt.Color(223, 220, 217));
        btnNavigationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        btnNavigationPanel.setLayout(new java.awt.GridBagLayout());

        naviEditBtn.setText("   Edit Entries   ");
        naviEditBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        naviEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naviEditBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        btnNavigationPanel.add(naviEditBtn, gridBagConstraints);

        navRestBtn.setText("Reset Table");
        navRestBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        navRestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navRestBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        btnNavigationPanel.add(navRestBtn, gridBagConstraints);

        previousBtn.setBackground(new java.awt.Color(204, 204, 204));
        previousBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PREV1.GIF"))); // NOI18N
        previousBtn.setEnabled(false);
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        btnNavigationPanel.add(previousBtn, gridBagConstraints);

        nextBtn.setBackground(new java.awt.Color(204, 204, 204));
        nextBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NEXT1.GIF"))); // NOI18N
        nextBtn.setEnabled(false);
        nextBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextBtn.setPreferredSize(new java.awt.Dimension(95, 25));
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        btnNavigationPanel.add(nextBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        currentMaizeBagDetailsPanel.add(btnNavigationPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        mainPanel.add(currentMaizeBagDetailsPanel, gridBagConstraints);

        editCurrentMaizeBagPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Update/Remove"));
        editCurrentMaizeBagPanel.setToolTipText("");
        editCurrentMaizeBagPanel.setLayout(new java.awt.GridBagLayout());

        costPerBagTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                costPerBagTxtKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(costPerBagTxt, gridBagConstraints);

        totalCostTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(totalCostTxt, gridBagConstraints);

        costPerBagLbl.setText("Cost per Bag");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(costPerBagLbl, gridBagConstraints);

        totalCostLbl.setText("Total Cost");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(totalCostLbl, gridBagConstraints);

        estiTinsTxt.setEditable(false);
        estiTinsTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estimated No. Of Tins", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        editCurrentMaizeBagPanel.add(estiTinsTxt, gridBagConstraints);

        noBagBoughtTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noBagBoughtTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(noBagBoughtTxt, gridBagConstraints);

        noBagBoughtLbl.setText("No. of Maize Bag Bought");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(noBagBoughtLbl, gridBagConstraints);

        tinsPerBagTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tins Per Bag", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 0)));
        tinsPerBagTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tinsPerBagTxtKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(tinsPerBagTxt, gridBagConstraints);

        btnPanel.setLayout(new java.awt.GridBagLayout());

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        btnPanel.add(updateBtn, gridBagConstraints);

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        btnPanel.add(clearBtn, gridBagConstraints);

        cancelBtn.setText("Exit");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        btnPanel.add(cancelBtn, gridBagConstraints);

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        btnPanel.add(removeBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        editCurrentMaizeBagPanel.add(btnPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        mainPanel.add(editCurrentMaizeBagPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    
    private void ShowVisibleQueryItems(Integer offset){
     
     try {
         System.out.println("SELECT date, no_mbg_bght, est_tins, cost_per_bag, total_cost FROM maize_bags_tbl "
                 + "ORDER BY timestamp ASC LIMIT "+maizeBagsTable.getRowCount()+" OFFSET - "+offset+"");
         
         
        PreparedStatement pst = connectDB.prepareStatement("SELECT date, no_mbg_bght, est_tins, cost_per_bag, total_cost FROM maize_bags_tbl "
                 + "ORDER BY date DESC LIMIT "+maizeBagsTable.getRowCount()+" OFFSET - "+offset+"");
            
            
            ResultSet rset = pst.executeQuery();
            int i=0;
            while(rset.next()){
               maizeBagsTable.setValueAt(rset.getObject(1), i, 0);
               maizeBagsTable.setValueAt(rset.getObject(2), i, 1);
               maizeBagsTable.setValueAt(rset.getObject(3), i, 2);
               maizeBagsTable.setValueAt(rset.getObject(4), i, 3);
               maizeBagsTable.setValueAt(rset.getObject(5), i, 4);
               
               for (int a=1; a <= 5; a++) {
                   System.out.println("Values - "+rset.getObject(a));
               }
            
               i++;
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(EditMaizeBagBought.class.getName()).log(Level.SEVERE, null, ex);
        }   
     
     
     
     }
    
    private void noBagBoughtTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noBagBoughtTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noBagBoughtTxtActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        clear();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        java.util.Calendar cal = java.util.Calendar.getInstance();
        java.util.Date todayDate = cal.getTime();
        
        Double z = 0.00;
        
        String a = Double.toString(((Double.valueOf(noBagBoughtTxt.getText()))*(Double.valueOf(costPerBagTxt.getText()))));
        String rem_bags = "0";
        
        try {
            

                System.out.println("About to Get the Maize Bags");

                java.sql.PreparedStatement pstm = connectDB.prepareStatement("SELECT SUM(rem_bags) FROM maize_bags_tbl");
                java.sql.ResultSet rse = pstm.executeQuery();

                System.out.println("To Get the Maize Bags");

                while (rse.next()) {
                    System.out.println("Getting the Maize Bags");
                    rem_bags = dbObject.getDBObject(rse.getObject(1), "0");

                }
                System.out.println("Remaining Bags - "+rem_bags);
                
                
                if (rem_bags.equals("0")) {
                    z = Double.valueOf(noBagBoughtTxt.getText());   
                    
                        if (!(noBagBoughtTxt.getText().equals("")) && (noBagBoughtTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) && 
                            !(costPerBagTxt.getText().equals("")) && (costPerBagTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) && 
                            !(totalCostTxt.getText().equals("")) && (a.matches("^[0-9]+(\\.[0-9]{1,4})?$")) && 
                            !(estiTinsTxt.getText().equals("")) && (estiTinsTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                        System.out.print("About to insert the values.!!!");

                        try {
                                connectDB.setAutoCommit(false);

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO maize_bags_tbl"
                                        + "(date, no_mbg_bght, cost_per_bag, total_cost, est_tins, rem_bags, user_name) VALUES (?, ?, ?, ?, ?, ?, ?)");

                                    pstmt.setDate(1, com.amimobenja.www.helpers.SQLDateFormat.getSQLDate(todayDate));
                                    pstmt.setDouble(2, Double.valueOf(noBagBoughtTxt.getText()));
                                    pstmt.setDouble(3, Double.valueOf(costPerBagTxt.getText()));
                                    pstmt.setDouble(4, Double.valueOf(a));
                                    pstmt.setDouble(5, Double.valueOf(estiTinsTxt.getText()));
                                    pstmt.setDouble(6, z);
                                    pstmt.setString(7, userName);

                                    pstmt.executeUpdate();
                                    connectDB.commit();
                                    connectDB.setAutoCommit(true);

                                    System.out.print("\nSuccess!!! Maize Bag Details saved successfully");
                                    JOptionPane.showMessageDialog(null, "The Maize Bag Details have been saved successfully. ", 
                                        "Success!!! Maize Bag Details saved successfully", JOptionPane.INFORMATION_MESSAGE);

                                    clear();


                            } catch (java.lang.Exception sq) {

                                try {
                                    connectDB.rollback();
                                } catch (java.sql.SQLException sql) {
                                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                }
                                System.out.println(sq.getMessage());
                                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                    } else {            
                        if (noBagBoughtTxt.getText().equals("")) {
                            noBagBoughtLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field No. of Maize Bag Bought is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (costPerBagTxt.getText().equals("")) {
                            costPerBagLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Cost per Bag is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (totalCostTxt.getText().equals("")) {
                            totalCostLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Total Cost is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (estiTinsTxt.getText().equals("")) {
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Estimated No. Of Tins is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        }  else if (!(noBagBoughtTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            noBagBoughtLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field No. of Maize Bag Bought has some unrecognized Values - "+noBagBoughtTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (!(costPerBagTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            costPerBagLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Cost per Bag has some unrecognized Values - "+costPerBagTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (!(totalCostTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            totalCostLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Total Cost has some unrecognized Values - "+totalCostTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (!(estiTinsTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Estimated No. Of Tins has some unrecognized Values - "+estiTinsTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        }

                    }
                    
                } else {
                    z = Double.valueOf(noBagBoughtTxt.getText());   
                    
                    if (!(noBagBoughtTxt.getText().equals("")) && (noBagBoughtTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) && 
                        !(costPerBagTxt.getText().equals("")) && (costPerBagTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) && 
                        !(totalCostTxt.getText().equals("")) && (a.matches("^[0-9]+(\\.[0-9]{1,4})?$")) && 
                        !(estiTinsTxt.getText().equals("")) && (estiTinsTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                        System.out.print("About to insert the values.!!!");

                        try {
                                connectDB.setAutoCommit(false);

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE maize_bags_tbl SET "
                                        + "date = '"+com.amimobenja.www.helpers.SQLDateFormat.getSQLDate(todayDate)+"', "
                                        + "no_mbg_bght = '"+Double.valueOf(noBagBoughtTxt.getText())+"', "
                                        + "cost_per_bag = '"+Double.valueOf(costPerBagTxt.getText())+"', "
                                        + "total_cost = '"+Double.valueOf(a)+"', "
                                        + "est_tins = '"+Double.valueOf(estiTinsTxt.getText())+"', "
                                        + "rem_bags = '"+z+"', user_name = '"+userName+"' ");


                                    pstmt.executeUpdate();
                                    connectDB.commit();
                                    connectDB.setAutoCommit(true);

                                    System.out.print("\nSuccess!!! Maize Bag Details Updated successfully");
                                    JOptionPane.showMessageDialog(null, "The Maize Bag Details have been Updated successfully. ", 
                                        "Success!!! Maize Bag Details Updated successfully", JOptionPane.INFORMATION_MESSAGE);

                                    clear();


                            } catch (java.lang.Exception sq) {

                                try {
                                    connectDB.rollback();
                                } catch (java.sql.SQLException sql) {
                                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                }
                                System.out.println(sq.getMessage());
                                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                    } else {            
                        if (noBagBoughtTxt.getText().equals("")) {
                            noBagBoughtLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field No. of Maize Bag Bought is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (costPerBagTxt.getText().equals("")) {
                            costPerBagLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Cost per Bag is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (totalCostTxt.getText().equals("")) {
                            totalCostLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Total Cost is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (estiTinsTxt.getText().equals("")) {
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Estimated No. Of Tins is Empty.", "Empty Fields Noted! ", JOptionPane.ERROR_MESSAGE);
                        }  else if (!(noBagBoughtTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            noBagBoughtLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field No. of Maize Bag Bought has some unrecognized Values - "+noBagBoughtTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (!(costPerBagTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            costPerBagLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Cost per Bag has some unrecognized Values - "+costPerBagTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (!(totalCostTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            totalCostLbl.setForeground(Color.red);
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Total Cost has some unrecognized Values - "+totalCostTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        } else if (!(estiTinsTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$"))) {
                            JOptionPane.showMessageDialog(rootPane, "The Text Field Estimated No. Of Tins has some unrecognized Values - "+estiTinsTxt.getText(), 
                                    "Unrecognized Values Noted! ", JOptionPane.ERROR_MESSAGE);
                        }

                    }
                    
                    
                }
                
                System.out.println("Remaining Bags after if - "+rem_bags);
                System.out.println("Z - "+z);
                System.out.println("The Maize Tins should be set!");

            } catch (SQLException es) {
                System.out.println(es);

            }
        
        
        
    }//GEN-LAST:event_updateBtnActionPerformed

    private void costPerBagTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_costPerBagTxtKeyReleased
        
        if (noBagBoughtTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$") && costPerBagTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
            String a = Double.toString(((Double.valueOf(noBagBoughtTxt.getText()))*(Double.valueOf(costPerBagTxt.getText()))));
            totalCostTxt.setText(new com.amimobenja.www.helpers.Format2Currency().Format2Currency(a));
        } else {
            JOptionPane.showMessageDialog(rootPane, "Double check the Details Entered at No. of Maize Bag Bought - "+noBagBoughtTxt.getText()+" "
                    + "and Cost per Bag - "+costPerBagTxt.getText()+"! \n\nRemove any Spaces.", "Error! In Values.", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_costPerBagTxtKeyReleased

    private void tinsPerBagTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tinsPerBagTxtKeyReleased
        if (noBagBoughtTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$") && tinsPerBagTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
            estiTinsTxt.setText(Double.toString(Double.valueOf(noBagBoughtTxt.getText())*Double.valueOf(tinsPerBagTxt.getText())));        
        } else {
            JOptionPane.showMessageDialog(rootPane, "Unrecognized Values noted!", "Unknown Value!!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tinsPerBagTxtKeyReleased

    private void naviEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naviEditBtnActionPerformed

        offset = 0;
        limit = 30;
        ClearTable.clearthisTable(maizeBagsTable);
        ShowVisibleQueryItems(offset);

        nextBtn.setEnabled(true);
    }//GEN-LAST:event_naviEditBtnActionPerformed

    private void navRestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navRestBtnActionPerformed
        
        offset =0;
        limit = 30;
        ClearTable.clearthisTable(maizeBagsTable);
        ShowVisibleQueryItems(offset);

        nextBtn.setEnabled(false);
        previousBtn.setEnabled(false);
    }//GEN-LAST:event_navRestBtnActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        // TODO add your handling code here:
        if(offset>0){
            offset= offset-maizeBagsTable.getRowCount();

            ClearTable.clearthisTable(maizeBagsTable);
            ShowVisibleQueryItems(offset);}
        else{

            JOptionPane.showMessageDialog(rootPane, "The End of the File.", "End of Table List", JOptionPane.INFORMATION_MESSAGE);
            previousBtn.setEnabled(false);
        }
    }//GEN-LAST:event_previousBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        
        offset= offset+maizeBagsTable.getRowCount();

        ClearTable.clearthisTable(maizeBagsTable);
        ShowVisibleQueryItems(offset);

        previousBtn.setEnabled(true);
    }//GEN-LAST:event_nextBtnActionPerformed

    private void maizeBagsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maizeBagsTableMouseClicked
        if (maizeBagsTable.getValueAt(maizeBagsTable.getSelectedRow(), maizeBagsTable.getSelectedColumn()) != null) {
            System.out.println("Selected Column is not NULL!!!");
            noBagBoughtTxt.setText(maizeBagsTable.getValueAt(maizeBagsTable.getSelectedRow(), 1).toString());
            estiTinsTxt.setText(maizeBagsTable.getValueAt(maizeBagsTable.getSelectedRow(), 2).toString());
            costPerBagTxt.setText(maizeBagsTable.getValueAt(maizeBagsTable.getSelectedRow(), 3).toString());
            totalCostTxt.setText(maizeBagsTable.getValueAt(maizeBagsTable.getSelectedRow(), 4).toString());
        } else {
            System.out.println("Selected Column is contains NULL values!!!");
            JOptionPane.showMessageDialog(null, "The Selected Row contains no values. Select another...", "Empty Values Selected.", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_maizeBagsTableMouseClicked

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        if (maizeBagsTable.getValueAt(maizeBagsTable.getSelectedRow(), maizeBagsTable.getSelectedColumn()) != null) {
            System.out.println("Selected Column is not NULL!!!");
            
            int a = JOptionPane.showConfirmDialog(null, "Do you wan to remove the selected details?", 
                    "Removing Selected Details.", JOptionPane.YES_NO_CANCEL_OPTION);
            
            if (a == 0) {
                try {
                            connectDB.setAutoCommit(false);

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM maize_bags_tbl");


                                pstmt.executeUpdate();
                                connectDB.commit();
                                connectDB.setAutoCommit(true);

                                System.out.print("\nSuccess!!! Maize Bag Details Deleted successfully");
                                JOptionPane.showMessageDialog(null, "The Maize Bag Details have been removed successfully. ", 
                                    "Success!!! Maize Bag Details removed successfully", JOptionPane.INFORMATION_MESSAGE);

                                clear();


                        } catch (java.lang.Exception sq) {

                            try {
                                connectDB.rollback();
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            System.out.println(sq.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
            
            } else {
                System.out.print("\nNothing Deleted");
                JOptionPane.showMessageDialog(null, "Nothing has been removed or deleted. ", 
                    "SNothing Deleted.", JOptionPane.INFORMATION_MESSAGE);
            }
            
            
        } else {
            System.out.println("Selected Column is contains NULL values!!!");
            JOptionPane.showMessageDialog(null, "The Selected Row contains no values. Select another...", "Empty Values Selected.", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeBtnActionPerformed
    
    public void clear() {
        offset =0;
        limit = 30;
        ClearTable.clearthisTable(maizeBagsTable);
        ShowVisibleQueryItems(offset);

        nextBtn.setEnabled(true);
        
        noBagBoughtTxt.setText("");
        tinsPerBagTxt.setText("");
        estiTinsTxt.setText("");        
        costPerBagTxt.setText("");
        totalCostTxt.setText("");
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnNavigationPanel;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JLabel costPerBagLbl;
    private javax.swing.JTextField costPerBagTxt;
    private javax.swing.JPanel currentMaizeBagDetailsPanel;
    private javax.swing.JPanel editCurrentMaizeBagPanel;
    private javax.swing.JTextField estiTinsTxt;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane maizeBagsScrollPane;
    private javax.swing.JTable maizeBagsTable;
    private javax.swing.JButton navRestBtn;
    private javax.swing.JButton naviEditBtn;
    private javax.swing.JButton nextBtn;
    private javax.swing.JLabel noBagBoughtLbl;
    private javax.swing.JTextField noBagBoughtTxt;
    private javax.swing.JButton previousBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JTextField tinsPerBagTxt;
    private javax.swing.JLabel totalCostLbl;
    private javax.swing.JTextField totalCostTxt;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.amimobenja.www;
import static com.amimobenja.www.SoftFlourMain.mainenanceCostTxt;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author afro
 */
public class MaintenanceItemsCost extends javax.swing.JFrame {

    public static java.sql.Connection connectDB = null;
    java.lang.String userName = null;
    com.amimobenja.www.helpers.DBObject dbObject;
    /**
     * Creates new form MaintenanceItemsCost
     * @param connDb
     * @param username
     */
    public MaintenanceItemsCost(java.sql.Connection connDb, java.lang.String username) {
        connectDB = connDb;
        userName = username;
        dbObject = new com.amimobenja.www.helpers.DBObject();
        
        initComponents();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        detailsPanel = new javax.swing.JPanel();
        totalCostScrollPane = new javax.swing.JScrollPane();
        totalCostTextArea = new javax.swing.JTextArea();
        mainTablePanel = new javax.swing.JPanel();
        mainTableScrollPane = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Maintenance Cost");
        setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        detailsPanel.setLayout(new java.awt.GridBagLayout());

        totalCostTextArea.setColumns(20);
        totalCostTextArea.setRows(5);
        totalCostTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Total Cost"));
        totalCostScrollPane.setViewportView(totalCostTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        detailsPanel.add(totalCostScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(detailsPanel, gridBagConstraints);

        mainTablePanel.setLayout(new java.awt.GridBagLayout());

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Maintenance Item Name", "Cost", "Add", "Remove"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        mainTableScrollPane.setViewportView(mainTable);
        if (mainTable.getColumnModel().getColumnCount() > 0) {
            mainTable.getColumnModel().getColumn(0).setResizable(false);
            mainTable.getColumnModel().getColumn(0).setPreferredWidth(250);
            mainTable.getColumnModel().getColumn(1).setResizable(false);
            mainTable.getColumnModel().getColumn(1).setPreferredWidth(90);
            mainTable.getColumnModel().getColumn(2).setResizable(false);
            mainTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            mainTable.getColumnModel().getColumn(3).setResizable(false);
            mainTable.getColumnModel().getColumn(3).setPreferredWidth(70);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainTablePanel.add(mainTableScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        getContentPane().add(mainTablePanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMouseClicked
        java.util.Calendar cal = java.util.Calendar.getInstance();
        java.util.Date todayDate = cal.getTime();
        
        if (mainTable.getValueAt(mainTable.getSelectedRow(), 2) == Boolean.TRUE) {
            System.out.println("Save to DB selected!");
            if (!(mainTable.getValueAt(mainTable.getSelectedRow(), 0) == null && 
                mainTable.getValueAt(mainTable.getSelectedRow(), 1) == null)) {
                
                try {
                    connectDB.setAutoCommit(false);
                    
                    java.sql.PreparedStatement pst = connectDB.prepareStatement("INSERT INTO maintenance_cost_tbl(date, maintenance_item, cost, username) "
                            + "VALUES (?, ?, ?, ?);");
                    
                        pst.setDate(1, com.amimobenja.www.helpers.SQLDateFormat.getSQLDate(todayDate));
                        pst.setObject(2, mainTable.getValueAt(mainTable.getSelectedRow(), 0));
                        pst.setDouble(3, Double.valueOf(mainTable.getValueAt(mainTable.getSelectedRow(), 1).toString()));
                        pst.setString(4, userName);
                    
                    pst.executeUpdate();                       
                    connectDB.commit();
                    connectDB.setAutoCommit(true); 
                    
                    System.out.print("\nSuccess!!! Todays Daily Soft Floor Details saved successfully");
                    JOptionPane.showMessageDialog(null, "Success!!! Data saved successfully. ", 
                            "Success!!! Data saved successfully.", JOptionPane.INFORMATION_MESSAGE);
                    Double sum_cost = 0.0;
                    try {
                        connectDB.setAutoCommit(false);
                        
                        java.sql.PreparedStatement pstm = connectDB.prepareStatement("SELECT SUM(cost) FROM maintenance_cost_tbl "
                                + "WHERE date = '"+com.amimobenja.www.helpers.SQLDateFormat.getSQLDate(todayDate)+"'");
                        java.sql.ResultSet rstm = pstm.executeQuery();
                        
                        while (rstm.next()) {
                            sum_cost = rstm.getDouble(1);                      
                        }
                        
                        totalCostTextArea.setText("Maintenance Cost - "+sum_cost);
                        mainenanceCostTxt.setText(Double.toString(sum_cost));                        
                        
                    
                    } catch (SQLException sqlEp) {
                        System.out.println("SQL EXception - "+sqlEp);
                    }
                    
                
                } catch (java.lang.Exception sql) {
                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sqlE) {
                        JOptionPane.showMessageDialog(this, sqlE.getMessage(), "Error Message!", JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println("Ati What? ---> "+sql.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                
                }
            
            } else {
                JOptionPane.showMessageDialog(null, "The Selected Row has empty values.", "Empty Values Noted!", JOptionPane.ERROR_MESSAGE);
                mainTable.setValueAt(Boolean.FALSE, mainTable.getSelectedRow(), 2);
                mainTable.setValueAt(Boolean.FALSE, mainTable.getSelectedRow(), 3);            
            }   
                
                
        } else if (mainTable.getValueAt(mainTable.getSelectedRow(), 3) == Boolean.TRUE) {
            if (!(mainTable.getValueAt(mainTable.getSelectedRow(), 0) == null && 
                mainTable.getValueAt(mainTable.getSelectedRow(), 1) == null)) {
                
                System.out.println("Remove DB selected!");
                int a = JOptionPane.showConfirmDialog(null, "Do you want to remove the selected details?", "Remove Details", JOptionPane.YES_NO_CANCEL_OPTION);
                
                if (a == 0) {
                    System.out.println("Yes Remove!");
                    try {
                        connectDB.setAutoCommit(false);

                        java.sql.PreparedStatement pst = connectDB.prepareStatement("DELETE FROM maintenance_cost_tbl "
                                + "WHERE date = '"+com.amimobenja.www.helpers.SQLDateFormat.getSQLDate(todayDate)+"' "
                                + "AND maintenance_item = '"+mainTable.getValueAt(mainTable.getSelectedRow(), 0)+"' "
                                + "AND cost = '"+Double.valueOf(mainTable.getValueAt(mainTable.getSelectedRow(), 1).toString())+"' "
                                + "AND username = '"+userName+"';");

                        pst.executeUpdate();                       
                        connectDB.commit();
                        connectDB.setAutoCommit(true); 
                        
                        mainTable.setValueAt("", mainTable.getSelectedRow(), 0);
                        mainTable.setValueAt("", mainTable.getSelectedRow(), 1);

                        System.out.print("\nSuccess!!! Data REMOVED successfully");
                        JOptionPane.showMessageDialog(null, "Success!!! Data removed successfully. ", 
                                "Success!!! Data removed successfully.", JOptionPane.INFORMATION_MESSAGE);


                    } catch (java.lang.Exception sql) {
                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sqlE) {
                            JOptionPane.showMessageDialog(this, sqlE.getMessage(), "Error Message!", JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println("Ati What? ---> "+sql.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }
                
                } else {
                    System.out.println("No don't do it!");
                    JOptionPane.showMessageDialog(null, "Nothing has been removed.", "Remove Data", JOptionPane.INFORMATION_MESSAGE);
                }
            
            } else {
                JOptionPane.showMessageDialog(null, "The Selected Row has empty values.", "Empty Values Noted!", JOptionPane.ERROR_MESSAGE);
                mainTable.setValueAt(Boolean.FALSE, mainTable.getSelectedRow(), 2);
                mainTable.setValueAt(Boolean.FALSE, mainTable.getSelectedRow(), 3);            
            } 
        }
        
    }//GEN-LAST:event_mainTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JTable mainTable;
    private javax.swing.JPanel mainTablePanel;
    private javax.swing.JScrollPane mainTableScrollPane;
    private javax.swing.JScrollPane totalCostScrollPane;
    private javax.swing.JTextArea totalCostTextArea;
    // End of variables declaration//GEN-END:variables
}
